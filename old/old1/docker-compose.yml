# version: '3.8'

# services:

#   # GPU가 켜져있으면 GPU 컨테이너로 신호를 보내주는 컨테이너.
#   stt_proxy:
#     build: ./stt/proxy
#     container_name: stt_proxy
#     ports:
#       - "5001:5000"
#     volumes:
#       - ./stt/proxy:/app
#     restart: always

#   # CPU 컨테이너 (mac 혹은 gpu 없는 환경에서 사용)
#   stt_cpu:
#     build: ./stt/cpu
#     container_name: stt_cpu
#     ports:
#       - "5002:5000"
#     restart: always

#   # GPU 컨테이너 (mac에서는 주석)
#   # stt_gpu:
#   #   build: ./stt/gpu
#   #   container_name: stt_gpu
#   #   ports:
#   #     - "5003:5000"
#   #   deploy:
#   #     resources:
#   #       reservations:
#   #         devices:
#   #           - capabilities: [gpu]
#   #   restart: always

#   # 발화 감지 컨테이너
#   stt_tiny:
#     build: ./stt/tiny
#     container_name: stt_tiny
#     ports:
#       - "5004:5000"
#     restart: always

#   # 컨트롤 패널 (웹 접근) 컨테이너
#   control_panel:
#     build: ./control-panel
#     container_name: control_panel
#     ports:
#       - "80:80"
#     restart: always
#     volumes:
#       - ./control-panel/conf/nginx.conf:/etc/nginx/nginx.conf
#       - ./control-panel/src:/usr/share/nginx/html
#     depends_on:
#       - stt_proxy

# 테스트용

version: '3.8'

services:

  # ✅ Whisper base - CPU (WebSocket)
  stt_cpu_ws:
    build: ./stt/cpu_ws
    container_name: stt_cpu_ws
    ports:
      - "5002:5000"
    restart: always

  # ✅ Whisper tiny - 발화 감지 (WebSocket)
  stt_tiny_ws:
    build: ./stt/tiny_ws
    container_name: stt_tiny_ws
    ports:
      - "5004:5000"
    restart: always

  # ✅ Web Control Panel (NGINX + Static UI)
  control_panel:
    build: ./control-panel
    container_name: control_panel
    ports:
      - "80:80"
    restart: always
    volumes:
      - ./control-panel/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./control-panel/src:/usr/share/nginx/html
    depends_on:
      - stt_cpu_ws
      - stt_tiny_ws

  # ✅ Proxy Server (REST용 유지)
  stt_proxy:
    build: ./stt/proxy
    container_name: stt_proxy
    ports:
      - "5001:5000"
    volumes:
      - ./stt/proxy:/app
    restart: always
